# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Txn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, hash: str=None, timestamp: int=None, address_from: str=None, address_to: str=None, value: float=None, token: str=None, fee_eth: float=None, fee_usd: float=None):  # noqa: E501
        """Txn - a model defined in Swagger

        :param hash: The hash of this Txn.  # noqa: E501
        :type hash: str
        :param timestamp: The timestamp of this Txn.  # noqa: E501
        :type timestamp: int
        :param address_from: The address_from of this Txn.  # noqa: E501
        :type address_from: str
        :param address_to: The address_to of this Txn.  # noqa: E501
        :type address_to: str
        :param value: The value of this Txn.  # noqa: E501
        :type value: float
        :param token: The token of this Txn.  # noqa: E501
        :type token: str
        :param fee_eth: The fee_eth of this Txn.  # noqa: E501
        :type fee_eth: float
        :param fee_usd: The fee_usd of this Txn.  # noqa: E501
        :type fee_usd: float
        """
        self.swagger_types = {
            'hash': str,
            'timestamp': int,
            'address_from': str,
            'address_to': str,
            'value': float,
            'token': str,
            'fee_eth': float,
            'fee_usd': float
        }

        self.attribute_map = {
            'hash': 'hash',
            'timestamp': 'timestamp',
            'address_from': 'address_from',
            'address_to': 'address_to',
            'value': 'value',
            'token': 'token',
            'fee_eth': 'fee_eth',
            'fee_usd': 'fee_usd'
        }
        self._hash = hash
        self._timestamp = timestamp
        self._address_from = address_from
        self._address_to = address_to
        self._value = value
        self._token = token
        self._fee_eth = fee_eth
        self._fee_usd = fee_usd

    @classmethod
    def from_dict(cls, dikt) -> 'Txn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Txn of this Txn.  # noqa: E501
        :rtype: Txn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash(self) -> str:
        """Gets the hash of this Txn.


        :return: The hash of this Txn.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash: str):
        """Sets the hash of this Txn.


        :param hash: The hash of this Txn.
        :type hash: str
        """

        self._hash = hash

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Txn.


        :return: The timestamp of this Txn.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Txn.


        :param timestamp: The timestamp of this Txn.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def address_from(self) -> str:
        """Gets the address_from of this Txn.


        :return: The address_from of this Txn.
        :rtype: str
        """
        return self._address_from

    @address_from.setter
    def address_from(self, address_from: str):
        """Sets the address_from of this Txn.


        :param address_from: The address_from of this Txn.
        :type address_from: str
        """

        self._address_from = address_from

    @property
    def address_to(self) -> str:
        """Gets the address_to of this Txn.


        :return: The address_to of this Txn.
        :rtype: str
        """
        return self._address_to

    @address_to.setter
    def address_to(self, address_to: str):
        """Sets the address_to of this Txn.


        :param address_to: The address_to of this Txn.
        :type address_to: str
        """

        self._address_to = address_to

    @property
    def value(self) -> float:
        """Gets the value of this Txn.


        :return: The value of this Txn.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Txn.


        :param value: The value of this Txn.
        :type value: float
        """

        self._value = value

    @property
    def token(self) -> str:
        """Gets the token of this Txn.


        :return: The token of this Txn.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this Txn.


        :param token: The token of this Txn.
        :type token: str
        """

        self._token = token

    @property
    def fee_eth(self) -> float:
        """Gets the fee_eth of this Txn.


        :return: The fee_eth of this Txn.
        :rtype: float
        """
        return self._fee_eth

    @fee_eth.setter
    def fee_eth(self, fee_eth: float):
        """Sets the fee_eth of this Txn.


        :param fee_eth: The fee_eth of this Txn.
        :type fee_eth: float
        """

        self._fee_eth = fee_eth

    @property
    def fee_usd(self) -> float:
        """Gets the fee_usd of this Txn.


        :return: The fee_usd of this Txn.
        :rtype: float
        """
        return self._fee_usd

    @fee_usd.setter
    def fee_usd(self, fee_usd: float):
        """Sets the fee_usd of this Txn.


        :param fee_usd: The fee_usd of this Txn.
        :type fee_usd: float
        """

        self._fee_usd = fee_usd
